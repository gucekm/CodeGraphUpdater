using System.IO;
using System.Threading.Tasks;
using System;
using Microsoft.CodeAnalysis.CSharp;
using System.Linq;

class Program
{
    static async Task Main()
    {
        string repoPath = @"C:\Users\gucekm\source\repos\CodeGraphUpdater";
        //var files = GitHelper.GetChangedFiles(repoPath);
        var files = GetAllFiles(repoPath);
        var parser = new RoslynParser();
        var embeddingService = new OllamaEmbeddingService("http://localhost:11434", "nomic-embed-text");
        var writer = new Neo4jWriter("bolt://localhost:7687", "neo4j", "12345678", embeddingService);

        // Ensure vector indexes exist before writing embeddings
        await writer.CreateVectorIndexes();

        foreach (var file in files.Where(f => f.EndsWith(".cs")))
        {
            var fullPath = Path.Combine(repoPath, file);
            var code = File.ReadAllText(fullPath);

            // Trim leading and trailing whitespace from each line
            code = string.Join(
                Environment.NewLine,
                code.Split(new[] { "\r\n", "\n", "\r" }, StringSplitOptions.None)
                    .Select(line => line.Trim())
            );

            var tree = CSharpSyntaxTree.ParseText(code);
            var root = tree.GetRoot();

            var classes = parser.ParseClasses(root, file);
            var interfaces = parser.ParseInterfaces(root);
            await writer.WriteClasses(classes);
            await writer.WriteInterfaces(interfaces);
        }

        Console.WriteLine("✅ Graph updated.");
    }
    static string[] GetAllFiles(string repoPath)
    {
        // Recursively get all files in the repo directory
        return Directory.GetFiles(repoPath, "*.*", SearchOption.AllDirectories);
    }
}
