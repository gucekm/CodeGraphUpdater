using System.Collections.Generic;
using System.Threading.Tasks;
using Neo4j.Driver;

public class Neo4jWriter
{
    private readonly IDriver _driver;

    public Neo4jWriter(string uri, string user, string password)
    {
        _driver = GraphDatabase.Driver(uri, AuthTokens.Basic(user, password));
    }

    public async Task WriteClasses(List<ClassInfo> classes)
    {
        using var session = _driver.AsyncSession();

        foreach (var cls in classes)
        {
            await session.ExecuteWriteAsync(async tx =>
            {
                // Class node
                await tx.RunAsync("MERGE (c:Class {name: $name}) SET c.filePath = $path, c.summary = $summary",
                    new { name = cls.Name, path = cls.FilePath, summary = cls.Summary ?? "" });

                // INHERITS
                if (!string.IsNullOrEmpty(cls.BaseType))
                {
                    await tx.RunAsync("MERGE (b:Class {name: $base})", new { baseType = cls.BaseType });
                    await tx.RunAsync("MATCH (c:Class {name: $child}), (b:Class {name: $base}) " +
                                      "MERGE (c)-[:INHERITS]->(b)",
                        new { child = cls.Name, baseType = cls.BaseType });
                }

                // Methods
                foreach (var method in cls.Methods)
                {
                    await tx.RunAsync("MERGE (m:Method {name: $name}) " +
                                      "SET m.summary = $summary, m.parameters = $parameters, m.returnType = $returnType",
                        new
                        {
                            name = method.Name,
                            summary = method.Summary ?? "",
                            parameters = method.Parameters,
                            returnType = method.ReturnType,
                            sourceCode = method.SourceCode // <-- Add this
                        });

                    await tx.RunAsync("MATCH (c:Class {name: $class}), (m:Method {name: $method}) " +
                                      "MERGE (c)-[:CONTAINS]->(m)",
                        new { @class = cls.Name, method = method.Name });

                    foreach (var call in method.Calls)
                    {
                        await tx.RunAsync("MERGE (target:Method {name: $called})", new { called = call });
                        await tx.RunAsync("MATCH (source:Method {name: $source}), (target:Method {name: $called}) " +
                                          "MERGE (source)-[:CALLS]->(target)",
                            new { source = method.Name, called = call });
                    }

                    foreach (var evt in method.SubscribesToEvents)
                    {
                        await tx.RunAsync("MERGE (e:Event {name: $name})", new { name = evt });
                        await tx.RunAsync("MATCH (m:Method {name: $method}), (e:Event {name: $name}) " +
                                          "MERGE (m)-[:SUBSCRIBES_TO]->(e)",
                            new { method = method.Name, name = evt });
                    }

                    foreach (var evt in method.RaisesEvents)
                    {
                        await tx.RunAsync("MERGE (e:Event {name: $name})", new { name = evt });
                        await tx.RunAsync("MATCH (m:Method {name: $method}), (e:Event {name: $name}) " +
                                          "MERGE (m)-[:RAISES]->(e)",
                            new { method = method.Name, name = evt });
                    }
                }

                // Properties
                foreach (var prop in cls.Properties)
                {
                    await tx.RunAsync("MERGE (p:Property {name: $name}) " +
                                      "SET p.type = $type, p.summary = $summary, p.modifiers = $modifiers",
                        new
                        {
                            name = prop.Name,
                            type = prop.Type,
                            summary = prop.Summary ?? "",
                            modifiers = string.Join(" ", prop.Modifiers)
                        });

                    await tx.RunAsync("MATCH (c:Class {name: $class}), (p:Property {name: $name}) " +
                                      "MERGE (c)-[:HAS_PROPERTY]->(p)",
                        new { @class = cls.Name, name = prop.Name });
                }

                // Events
                foreach (var evt in cls.Events)
                {
                    await tx.RunAsync("MERGE (e:Event {name: $name}) " +
                                      "SET e.type = $type, e.summary = $summary",
                        new
                        {
                            name = evt.Name,
                            type = evt.Type,
                            summary = evt.Summary ?? ""
                        });

                    await tx.RunAsync("MATCH (c:Class {name: $class}), (e:Event {name: $name}) " +
                                      "MERGE (c)-[:HAS_EVENT]->(e)",
                        new { @class = cls.Name, name = evt.Name });
                }

                // Fields
                foreach (var field in cls.Fields)
                {
                    await tx.RunAsync("MERGE (f:Field {name: $name}) " +
                                      "SET f.type = $type, f.summary = $summary, f.modifiers = $modifiers",
                        new
                        {
                            name = field.Name,
                            type = field.Type,
                            summary = field.Summary ?? "",
                            modifiers = string.Join(" ", field.Modifiers)
                        });

                    await tx.RunAsync("MATCH (c:Class {name: $class}), (f:Field {name: $name}) " +
                                      "MERGE (c)-[:HAS_FIELD]->(f)",
                        new { @class = cls.Name, name = field.Name });
                }

                // Constructors
                foreach (var ctor in cls.Constructors)
                {
                    await tx.RunAsync("MERGE (ctor:Constructor {name: $name}) " +
                                      "SET ctor.summary = $summary, ctor.parameters = $parameters, ctor.modifiers = $modifiers",
                        new
                        {
                            name = ctor.Name,
                            summary = ctor.Summary ?? "",
                            parameters = ctor.Parameters,
                            modifiers = string.Join(" ", ctor.Modifiers)
                        });

                    await tx.RunAsync("MATCH (c:Class {name: $class}), (ctor:Constructor {name: $name}) " +
                                      "MERGE (c)-[:HAS_CONSTRUCTOR]->(ctor)",
                        new { @class = cls.Name, name = ctor.Name });
                }
            });
        }
    }

    public async Task WriteInterfaces(List<string> interfaces)
    {
        using var session = _driver.AsyncSession();
        foreach (var name in interfaces)
        {
            await session.ExecuteWriteAsync(async tx =>
            {
                await tx.RunAsync("MERGE (i:Interface {name: $name})", new { name });
            });
        }
    }
}
